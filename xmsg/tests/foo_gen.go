package tests

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	. "github.com/duchiporexia/goutils/xmsg"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Dog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Dog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "name"
	err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "age"
	err = en.Append(0xa3, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Dog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "name"
	o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "age"
	o = append(o, 0xa3, 0x61, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Age)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Dog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Dog) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Foo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			err = z.Id.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "map":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Map")
				return
			}
			if z.Map == nil {
				z.Map = make(map[string]string, zb0002)
			} else if len(z.Map) > 0 {
				for key := range z.Map {
					delete(z.Map, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Map")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Map", za0001)
					return
				}
				z.Map[za0001] = za0002
			}
		case "map2":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Map2")
				return
			}
			if z.Map2 == nil {
				z.Map2 = make(map[string]Dog, zb0003)
			} else if len(z.Map2) > 0 {
				for key := range z.Map2 {
					delete(z.Map2, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 Dog
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Map2")
					return
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Map2", za0003)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Map2", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						za0004.Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Map2", za0003, "Name")
							return
						}
					case "age":
						za0004.Age, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Map2", za0003, "Age")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Map2", za0003)
							return
						}
					}
				}
				z.Map2[za0003] = za0004
			}
		case "arr":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Arr")
				return
			}
			if cap(z.Arr) >= int(zb0005) {
				z.Arr = (z.Arr)[:zb0005]
			} else {
				z.Arr = make([]string, zb0005)
			}
			for za0005 := range z.Arr {
				z.Arr[za0005], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Arr", za0005)
					return
				}
			}
		case "arr2":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Arr2")
				return
			}
			if cap(z.Arr2) >= int(zb0006) {
				z.Arr2 = (z.Arr2)[:zb0006]
			} else {
				z.Arr2 = make([]Dog, zb0006)
			}
			for za0006 := range z.Arr2 {
				var zb0007 uint32
				zb0007, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Arr2", za0006)
					return
				}
				for zb0007 > 0 {
					zb0007--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Arr2", za0006)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Arr2[za0006].Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Arr2", za0006, "Name")
							return
						}
					case "age":
						z.Arr2[za0006].Age, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Arr2", za0006, "Age")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Arr2", za0006)
							return
						}
					}
				}
			}
		case "dog":
			var zb0008 uint32
			zb0008, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Dog")
				return
			}
			for zb0008 > 0 {
				zb0008--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Dog")
					return
				}
				switch msgp.UnsafeString(field) {
				case "name":
					z.Dog.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Dog", "Name")
						return
					}
				case "age":
					z.Dog.Age, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Dog", "Age")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Dog")
						return
					}
				}
			}
		case "dog2":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Dog2")
					return
				}
				z.Dog2 = nil
			} else {
				if z.Dog2 == nil {
					z.Dog2 = new(Dog)
				}
				var zb0009 uint32
				zb0009, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Dog2")
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Dog2")
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Dog2.Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Dog2", "Name")
							return
						}
					case "age":
						z.Dog2.Age, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Dog2", "Age")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Dog2")
							return
						}
					}
				}
			}
		case "createTime":
			err = dc.ReadExtension(&z.CreateTime)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "updateTime":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "UpdateTime")
					return
				}
				z.UpdateTime = nil
			} else {
				if z.UpdateTime == nil {
					z.UpdateTime = new(DateTime)
				}
				err = dc.ReadExtension(z.UpdateTime)
				if err != nil {
					err = msgp.WrapError(err, "UpdateTime")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Foo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "id"
	err = en.Append(0x8b, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = z.Id.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "age"
	err = en.Append(0xa3, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	// write "map"
	err = en.Append(0xa3, 0x6d, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Map)))
	if err != nil {
		err = msgp.WrapError(err, "Map")
		return
	}
	for za0001, za0002 := range z.Map {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Map")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Map", za0001)
			return
		}
	}
	// write "map2"
	err = en.Append(0xa4, 0x6d, 0x61, 0x70, 0x32)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Map2)))
	if err != nil {
		err = msgp.WrapError(err, "Map2")
		return
	}
	for za0003, za0004 := range z.Map2 {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Map2")
			return
		}
		// map header, size 2
		// write "name"
		err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(za0004.Name)
		if err != nil {
			err = msgp.WrapError(err, "Map2", za0003, "Name")
			return
		}
		// write "age"
		err = en.Append(0xa3, 0x61, 0x67, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(za0004.Age)
		if err != nil {
			err = msgp.WrapError(err, "Map2", za0003, "Age")
			return
		}
	}
	// write "arr"
	err = en.Append(0xa3, 0x61, 0x72, 0x72)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Arr)))
	if err != nil {
		err = msgp.WrapError(err, "Arr")
		return
	}
	for za0005 := range z.Arr {
		err = en.WriteString(z.Arr[za0005])
		if err != nil {
			err = msgp.WrapError(err, "Arr", za0005)
			return
		}
	}
	// write "arr2"
	err = en.Append(0xa4, 0x61, 0x72, 0x72, 0x32)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Arr2)))
	if err != nil {
		err = msgp.WrapError(err, "Arr2")
		return
	}
	for za0006 := range z.Arr2 {
		// map header, size 2
		// write "name"
		err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Arr2[za0006].Name)
		if err != nil {
			err = msgp.WrapError(err, "Arr2", za0006, "Name")
			return
		}
		// write "age"
		err = en.Append(0xa3, 0x61, 0x67, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Arr2[za0006].Age)
		if err != nil {
			err = msgp.WrapError(err, "Arr2", za0006, "Age")
			return
		}
	}
	// write "dog"
	err = en.Append(0xa3, 0x64, 0x6f, 0x67)
	if err != nil {
		return
	}
	// map header, size 2
	// write "name"
	err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Dog.Name)
	if err != nil {
		err = msgp.WrapError(err, "Dog", "Name")
		return
	}
	// write "age"
	err = en.Append(0xa3, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Dog.Age)
	if err != nil {
		err = msgp.WrapError(err, "Dog", "Age")
		return
	}
	// write "dog2"
	err = en.Append(0xa4, 0x64, 0x6f, 0x67, 0x32)
	if err != nil {
		return
	}
	if z.Dog2 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "name"
		err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Dog2.Name)
		if err != nil {
			err = msgp.WrapError(err, "Dog2", "Name")
			return
		}
		// write "age"
		err = en.Append(0xa3, 0x61, 0x67, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Dog2.Age)
		if err != nil {
			err = msgp.WrapError(err, "Dog2", "Age")
			return
		}
	}
	// write "createTime"
	err = en.Append(0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	// write "updateTime"
	err = en.Append(0xaa, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	if z.UpdateTime == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteExtension(z.UpdateTime)
		if err != nil {
			err = msgp.WrapError(err, "UpdateTime")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Foo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "id"
	o = append(o, 0x8b, 0xa2, 0x69, 0x64)
	o, err = z.Id.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "age"
	o = append(o, 0xa3, 0x61, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Age)
	// string "map"
	o = append(o, 0xa3, 0x6d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.Map)))
	for za0001, za0002 := range z.Map {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "map2"
	o = append(o, 0xa4, 0x6d, 0x61, 0x70, 0x32)
	o = msgp.AppendMapHeader(o, uint32(len(z.Map2)))
	for za0003, za0004 := range z.Map2 {
		o = msgp.AppendString(o, za0003)
		// map header, size 2
		// string "name"
		o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, za0004.Name)
		// string "age"
		o = append(o, 0xa3, 0x61, 0x67, 0x65)
		o = msgp.AppendInt(o, za0004.Age)
	}
	// string "arr"
	o = append(o, 0xa3, 0x61, 0x72, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Arr)))
	for za0005 := range z.Arr {
		o = msgp.AppendString(o, z.Arr[za0005])
	}
	// string "arr2"
	o = append(o, 0xa4, 0x61, 0x72, 0x72, 0x32)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Arr2)))
	for za0006 := range z.Arr2 {
		// map header, size 2
		// string "name"
		o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Arr2[za0006].Name)
		// string "age"
		o = append(o, 0xa3, 0x61, 0x67, 0x65)
		o = msgp.AppendInt(o, z.Arr2[za0006].Age)
	}
	// string "dog"
	o = append(o, 0xa3, 0x64, 0x6f, 0x67)
	// map header, size 2
	// string "name"
	o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Dog.Name)
	// string "age"
	o = append(o, 0xa3, 0x61, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Dog.Age)
	// string "dog2"
	o = append(o, 0xa4, 0x64, 0x6f, 0x67, 0x32)
	if z.Dog2 == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "name"
		o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Dog2.Name)
		// string "age"
		o = append(o, 0xa3, 0x61, 0x67, 0x65)
		o = msgp.AppendInt(o, z.Dog2.Age)
	}
	// string "createTime"
	o = append(o, 0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	// string "updateTime"
	o = append(o, 0xaa, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if z.UpdateTime == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = msgp.AppendExtension(o, z.UpdateTime)
		if err != nil {
			err = msgp.WrapError(err, "UpdateTime")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Foo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			bts, err = z.Id.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "map":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Map")
				return
			}
			if z.Map == nil {
				z.Map = make(map[string]string, zb0002)
			} else if len(z.Map) > 0 {
				for key := range z.Map {
					delete(z.Map, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map", za0001)
					return
				}
				z.Map[za0001] = za0002
			}
		case "map2":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Map2")
				return
			}
			if z.Map2 == nil {
				z.Map2 = make(map[string]Dog, zb0003)
			} else if len(z.Map2) > 0 {
				for key := range z.Map2 {
					delete(z.Map2, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 Dog
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map2")
					return
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map2", za0003)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Map2", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						za0004.Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Map2", za0003, "Name")
							return
						}
					case "age":
						za0004.Age, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Map2", za0003, "Age")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Map2", za0003)
							return
						}
					}
				}
				z.Map2[za0003] = za0004
			}
		case "arr":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Arr")
				return
			}
			if cap(z.Arr) >= int(zb0005) {
				z.Arr = (z.Arr)[:zb0005]
			} else {
				z.Arr = make([]string, zb0005)
			}
			for za0005 := range z.Arr {
				z.Arr[za0005], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Arr", za0005)
					return
				}
			}
		case "arr2":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Arr2")
				return
			}
			if cap(z.Arr2) >= int(zb0006) {
				z.Arr2 = (z.Arr2)[:zb0006]
			} else {
				z.Arr2 = make([]Dog, zb0006)
			}
			for za0006 := range z.Arr2 {
				var zb0007 uint32
				zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Arr2", za0006)
					return
				}
				for zb0007 > 0 {
					zb0007--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Arr2", za0006)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Arr2[za0006].Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Arr2", za0006, "Name")
							return
						}
					case "age":
						z.Arr2[za0006].Age, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Arr2", za0006, "Age")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Arr2", za0006)
							return
						}
					}
				}
			}
		case "dog":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Dog")
				return
			}
			for zb0008 > 0 {
				zb0008--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Dog")
					return
				}
				switch msgp.UnsafeString(field) {
				case "name":
					z.Dog.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Dog", "Name")
						return
					}
				case "age":
					z.Dog.Age, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Dog", "Age")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Dog")
						return
					}
				}
			}
		case "dog2":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Dog2 = nil
			} else {
				if z.Dog2 == nil {
					z.Dog2 = new(Dog)
				}
				var zb0009 uint32
				zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Dog2")
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Dog2")
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Dog2.Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Dog2", "Name")
							return
						}
					case "age":
						z.Dog2.Age, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Dog2", "Age")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Dog2")
							return
						}
					}
				}
			}
		case "createTime":
			bts, err = msgp.ReadExtensionBytes(bts, &z.CreateTime)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "updateTime":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.UpdateTime = nil
			} else {
				if z.UpdateTime == nil {
					z.UpdateTime = new(DateTime)
				}
				bts, err = msgp.ReadExtensionBytes(bts, z.UpdateTime)
				if err != nil {
					err = msgp.WrapError(err, "UpdateTime")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Foo) Msgsize() (s int) {
	s = 1 + 3 + z.Id.Msgsize() + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.IntSize + 4 + msgp.MapHeaderSize
	if z.Map != nil {
		for za0001, za0002 := range z.Map {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 5 + msgp.MapHeaderSize
	if z.Map2 != nil {
		for za0003, za0004 := range z.Map2 {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + 1 + 5 + msgp.StringPrefixSize + len(za0004.Name) + 4 + msgp.IntSize
		}
	}
	s += 4 + msgp.ArrayHeaderSize
	for za0005 := range z.Arr {
		s += msgp.StringPrefixSize + len(z.Arr[za0005])
	}
	s += 5 + msgp.ArrayHeaderSize
	for za0006 := range z.Arr2 {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Arr2[za0006].Name) + 4 + msgp.IntSize
	}
	s += 4 + 1 + 5 + msgp.StringPrefixSize + len(z.Dog.Name) + 4 + msgp.IntSize + 5
	if z.Dog2 == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Dog2.Name) + 4 + msgp.IntSize
	}
	s += 11 + msgp.ExtensionPrefixSize + z.CreateTime.Len() + 11
	if z.UpdateTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.ExtensionPrefixSize + z.UpdateTime.Len()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MGrade) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "school_name":
			z.School, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "School")
				return
			}
		case "grade":
			z.Grade, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Grade")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MGrade) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "school_name"
	err = en.Append(0x82, 0xab, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.School)
	if err != nil {
		err = msgp.WrapError(err, "School")
		return
	}
	// write "grade"
	err = en.Append(0xa5, 0x67, 0x72, 0x61, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Grade)
	if err != nil {
		err = msgp.WrapError(err, "Grade")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MGrade) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "school_name"
	o = append(o, 0x82, 0xab, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.School)
	// string "grade"
	o = append(o, 0xa5, 0x67, 0x72, 0x61, 0x64, 0x65)
	o = msgp.AppendInt(o, z.Grade)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MGrade) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "school_name":
			z.School, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "School")
				return
			}
		case "grade":
			z.Grade, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Grade")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MGrade) Msgsize() (s int) {
	s = 1 + 12 + msgp.StringPrefixSize + len(z.School) + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MStudent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "sex":
			z.Sex, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "Sex")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MStudent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "name"
	err = en.Append(0x83, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "age"
	err = en.Append(0xa3, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	// write "sex"
	err = en.Append(0xa3, 0x73, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.Sex)
	if err != nil {
		err = msgp.WrapError(err, "Sex")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MStudent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "name"
	o = append(o, 0x83, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "age"
	o = append(o, 0xa3, 0x61, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Age)
	// string "sex"
	o = append(o, 0xa3, 0x73, 0x65, 0x78)
	o = msgp.AppendUint8(o, z.Sex)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MStudent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "sex":
			z.Sex, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sex")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MStudent) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.IntSize + 4 + msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MTeacher) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			err = z.Id.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "createTime":
			err = dc.ReadExtension(&z.CreateTime)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "update1Time":
			err = dc.ReadExtension(&z.Update1Time)
			if err != nil {
				err = msgp.WrapError(err, "Update1Time")
				return
			}
		case "update2Time":
			err = dc.ReadExtension(&z.Update2Time)
			if err != nil {
				err = msgp.WrapError(err, "Update2Time")
				return
			}
		case "update3Time":
			err = dc.ReadExtension(&z.Update3Time)
			if err != nil {
				err = msgp.WrapError(err, "Update3Time")
				return
			}
		case "update4Time":
			err = dc.ReadExtension(&z.Update4Time)
			if err != nil {
				err = msgp.WrapError(err, "Update4Time")
				return
			}
		case "grade_info":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Grade")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Grade")
					return
				}
				switch msgp.UnsafeString(field) {
				case "school_name":
					z.Grade.School, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Grade", "School")
						return
					}
				case "grade":
					z.Grade.Grade, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Grade", "Grade")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Grade")
						return
					}
				}
			}
		case "students":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Students")
				return
			}
			if cap(z.Students) >= int(zb0003) {
				z.Students = (z.Students)[:zb0003]
			} else {
				z.Students = make([]MStudent, zb0003)
			}
			for za0001 := range z.Students {
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Students", za0001)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Students", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Students[za0001].Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001, "Name")
							return
						}
					case "age":
						z.Students[za0001].Age, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001, "Age")
							return
						}
					case "sex":
						z.Students[za0001].Sex, err = dc.ReadUint8()
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001, "Sex")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MTeacher) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "id"
	err = en.Append(0x8a, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = z.Id.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "age"
	err = en.Append(0xa3, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	// write "createTime"
	err = en.Append(0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	// write "update1Time"
	err = en.Append(0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Update1Time)
	if err != nil {
		err = msgp.WrapError(err, "Update1Time")
		return
	}
	// write "update2Time"
	err = en.Append(0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Update2Time)
	if err != nil {
		err = msgp.WrapError(err, "Update2Time")
		return
	}
	// write "update3Time"
	err = en.Append(0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x33, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Update3Time)
	if err != nil {
		err = msgp.WrapError(err, "Update3Time")
		return
	}
	// write "update4Time"
	err = en.Append(0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x34, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Update4Time)
	if err != nil {
		err = msgp.WrapError(err, "Update4Time")
		return
	}
	// write "grade_info"
	err = en.Append(0xaa, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	// map header, size 2
	// write "school_name"
	err = en.Append(0x82, 0xab, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Grade.School)
	if err != nil {
		err = msgp.WrapError(err, "Grade", "School")
		return
	}
	// write "grade"
	err = en.Append(0xa5, 0x67, 0x72, 0x61, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Grade.Grade)
	if err != nil {
		err = msgp.WrapError(err, "Grade", "Grade")
		return
	}
	// write "students"
	err = en.Append(0xa8, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Students)))
	if err != nil {
		err = msgp.WrapError(err, "Students")
		return
	}
	for za0001 := range z.Students {
		// map header, size 3
		// write "name"
		err = en.Append(0x83, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Students[za0001].Name)
		if err != nil {
			err = msgp.WrapError(err, "Students", za0001, "Name")
			return
		}
		// write "age"
		err = en.Append(0xa3, 0x61, 0x67, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Students[za0001].Age)
		if err != nil {
			err = msgp.WrapError(err, "Students", za0001, "Age")
			return
		}
		// write "sex"
		err = en.Append(0xa3, 0x73, 0x65, 0x78)
		if err != nil {
			return
		}
		err = en.WriteUint8(z.Students[za0001].Sex)
		if err != nil {
			err = msgp.WrapError(err, "Students", za0001, "Sex")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MTeacher) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "id"
	o = append(o, 0x8a, 0xa2, 0x69, 0x64)
	o, err = z.Id.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "age"
	o = append(o, 0xa3, 0x61, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Age)
	// string "createTime"
	o = append(o, 0xaa, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	// string "update1Time"
	o = append(o, 0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x31, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.Update1Time)
	if err != nil {
		err = msgp.WrapError(err, "Update1Time")
		return
	}
	// string "update2Time"
	o = append(o, 0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.Update2Time)
	if err != nil {
		err = msgp.WrapError(err, "Update2Time")
		return
	}
	// string "update3Time"
	o = append(o, 0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x33, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.Update3Time)
	if err != nil {
		err = msgp.WrapError(err, "Update3Time")
		return
	}
	// string "update4Time"
	o = append(o, 0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x34, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.Update4Time)
	if err != nil {
		err = msgp.WrapError(err, "Update4Time")
		return
	}
	// string "grade_info"
	o = append(o, 0xaa, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f)
	// map header, size 2
	// string "school_name"
	o = append(o, 0x82, 0xab, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Grade.School)
	// string "grade"
	o = append(o, 0xa5, 0x67, 0x72, 0x61, 0x64, 0x65)
	o = msgp.AppendInt(o, z.Grade.Grade)
	// string "students"
	o = append(o, 0xa8, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Students)))
	for za0001 := range z.Students {
		// map header, size 3
		// string "name"
		o = append(o, 0x83, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Students[za0001].Name)
		// string "age"
		o = append(o, 0xa3, 0x61, 0x67, 0x65)
		o = msgp.AppendInt(o, z.Students[za0001].Age)
		// string "sex"
		o = append(o, 0xa3, 0x73, 0x65, 0x78)
		o = msgp.AppendUint8(o, z.Students[za0001].Sex)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MTeacher) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			bts, err = z.Id.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "age":
			z.Age, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "createTime":
			bts, err = msgp.ReadExtensionBytes(bts, &z.CreateTime)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "update1Time":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Update1Time)
			if err != nil {
				err = msgp.WrapError(err, "Update1Time")
				return
			}
		case "update2Time":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Update2Time)
			if err != nil {
				err = msgp.WrapError(err, "Update2Time")
				return
			}
		case "update3Time":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Update3Time)
			if err != nil {
				err = msgp.WrapError(err, "Update3Time")
				return
			}
		case "update4Time":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Update4Time)
			if err != nil {
				err = msgp.WrapError(err, "Update4Time")
				return
			}
		case "grade_info":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Grade")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Grade")
					return
				}
				switch msgp.UnsafeString(field) {
				case "school_name":
					z.Grade.School, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Grade", "School")
						return
					}
				case "grade":
					z.Grade.Grade, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Grade", "Grade")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Grade")
						return
					}
				}
			}
		case "students":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Students")
				return
			}
			if cap(z.Students) >= int(zb0003) {
				z.Students = (z.Students)[:zb0003]
			} else {
				z.Students = make([]MStudent, zb0003)
			}
			for za0001 := range z.Students {
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Students", za0001)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Students", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Students[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001, "Name")
							return
						}
					case "age":
						z.Students[za0001].Age, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001, "Age")
							return
						}
					case "sex":
						z.Students[za0001].Sex, bts, err = msgp.ReadUint8Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001, "Sex")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Students", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MTeacher) Msgsize() (s int) {
	s = 1 + 3 + z.Id.Msgsize() + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.IntSize + 11 + msgp.ExtensionPrefixSize + z.CreateTime.Len() + 12 + msgp.ExtensionPrefixSize + z.Update1Time.Len() + 12 + msgp.ExtensionPrefixSize + z.Update2Time.Len() + 12 + msgp.ExtensionPrefixSize + z.Update3Time.Len() + 12 + msgp.ExtensionPrefixSize + z.Update4Time.Len() + 11 + 1 + 12 + msgp.StringPrefixSize + len(z.Grade.School) + 6 + msgp.IntSize + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Students {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Students[za0001].Name) + 4 + msgp.IntSize + 4 + msgp.Uint8Size
	}
	return
}
