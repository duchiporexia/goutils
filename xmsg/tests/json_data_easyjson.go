// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tests

import (
	json "encoding/json"
	xmsg "github.com/duchiporexia/goutils/xmsg"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests(in *jlexer.Lexer, out *Teacher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "createTime":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "updateTime":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(xmsg.DateTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "grade_info":
			(out.Grade).UnmarshalEasyJSON(in)
		case "students":
			if in.IsNull() {
				in.Skip()
				out.Students = nil
			} else {
				in.Delim('[')
				if out.Students == nil {
					if !in.IsDelim(']') {
						out.Students = make([]Student, 0, 2)
					} else {
						out.Students = []Student{}
					}
				} else {
					out.Students = (out.Students)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Student
					(v1).UnmarshalEasyJSON(in)
					out.Students = append(out.Students, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests(out *jwriter.Writer, in Teacher) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Age))
	}
	if in.CreateTime != nil {
		const prefix string = ",\"createTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreateTime).MarshalJSON())
	}
	if in.UpdateTime != nil {
		const prefix string = ",\"updateTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.UpdateTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"grade_info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Grade).MarshalEasyJSON(out)
	}
	if len(in.Students) != 0 {
		const prefix string = ",\"students\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Students {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Teacher) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Teacher) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Teacher) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Teacher) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests(l, v)
}
func easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests1(in *jlexer.Lexer, out *Student) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "sex":
			out.Sex = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests1(out *jwriter.Writer, in Student) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Age))
	}
	if in.Sex != 0 {
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Sex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Student) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Student) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Student) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Student) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests1(l, v)
}
func easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests2(in *jlexer.Lexer, out *Grade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "school_name":
			out.School = string(in.String())
		case "grade":
			out.Grade = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests2(out *jwriter.Writer, in Grade) {
	out.RawByte('{')
	first := true
	_ = first
	if in.School != "" {
		const prefix string = ",\"school_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.School))
	}
	if in.Grade != 0 {
		const prefix string = ",\"grade\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Grade))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Grade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Grade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1627ba7EncodeGithubComDuchiporexiaGoutilsXmsgTests2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Grade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Grade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1627ba7DecodeGithubComDuchiporexiaGoutilsXmsgTests2(l, v)
}
